syntax = "proto2";
package hw.trezor.messages.mintlayer;

// Sugar for easier handling in Java
option java_package = "com.satoshilabs.trezor.lib.protobuf";
option java_outer_classname = "TrezorMessageMintlayer";

/** XXX

Most likely, ALL fields in this file should be `required`. We are leaving some optionals
in place, in cases where the field value continues to the JSON as a string -- on the off
chance that somebody is relying on the behavior.

*/

/**
 * Request: Ask the device for a Mintlayer address.
 * @start
 * @next MintlayerAddress
 * @next Failure
 */
message MintlayerGetAddress {
    repeated uint32 address_n = 1;  // BIP-32-style path to derive the key from master node
    optional bool show_display = 2; // optionally prompt for confirmation on trezor display
    optional bool chunkify = 3;     // display the address in chunks of 4 characters
}

/**
 * Response: A Mintlayer address.
 * @end
 */
message MintlayerAddress {
    required string address = 1;    // prefixed bech32 Mintlayer address
}

/**
 * Request: Ask device for a public key corresponding to address_n path.
 * @start
 * @next MintlayerPublicKey
 */
message MintlayerGetPublicKey {
    repeated uint32 address_n = 1;  // BIP-32 path to derive the key from master node
    optional bool show_display = 2; // optionally show on display before sending the result
}

/**
 * Response: A public key corresponding to address_n path.
 * @end
 */
message MintlayerPublicKey {
    required bytes public_key = 1;
}

/**
 * Request: Ask device to verify message
 * @start
 * @next Success
 * @next Failure
 */
message MintlayerVerifySig {
    repeated uint32 address_n = 1;  // BIP-32 path to derive the key from master node
    required bytes signature = 2;                       // signature to verify
    required bytes message = 3;                         // message to verify
}

/**
 * Request: Ask device to sign transaction
 * @start
 * @next MintlayerTxRequest
 * @next Failure
 */
message MintlayerSignTx {
    required uint32 outputs_count = 1;                         // number of transaction outputs
    required uint32 inputs_count = 2;                          // number of transaction inputs
    optional uint32 version = 3 [default=1];                   // transaction version
    optional bool serialize = 4 [default=true];               // serialize the full transaction, as opposed to only outputting the signatures
    optional bool chunkify = 5;                               // display the address in chunks of 4 characters
}

/**
 * Response: Device asks for information for signing transaction or returns the last result
 * If request_index is set, device awaits TxAck<any> matching the request type.
 * If signature_index is set, 'signature' contains signed input of signature_index's input
 * @end
 * @next TxAckInput
 * @next TxAckOutput
 * @next TxAckPrevMeta
 * @next TxAckPrevInput
 * @next TxAckPrevOutput
 * @next TxAckPrevExtraData
 * @next TxAckPaymentRequest
 */
message MintlayerTxRequest {
    optional MintlayerRequestType request_type = 1;              // what should be filled in TxAck message?
    optional MintlayerTxRequestDetailsType details = 2;          // request for tx details
    optional MintlayerTxRequestSerializedType serialized = 3;    // serialized data and request for next
    /**
    * Type of information required by transaction signing process
    */
    enum MintlayerRequestType {
        TXINPUT = 0;
        TXOUTPUT = 1;
        TXMETA = 2;
        TXFINISHED = 3;
    }
    /**
    * Structure representing request details
    */
    message MintlayerTxRequestDetailsType {
        optional uint32 request_index = 1;      // device expects TxAck message from the computer
        optional bytes tx_hash = 2;             // tx_hash of requested transaction
    }
    /**
    * Structure representing serialized data
    */
    message MintlayerTxRequestSerializedType {
        optional uint32 signature_index = 1;    // 'signature' field contains signed input of this index
        optional bytes signature = 2;           // signature of the signature_index input
        optional bytes serialized_tx = 3;       // part of serialized and signed transaction
    }
}

/** Data type for transaction input to be signed.
 *
 * @embed
 */
message MintlayerUtxoTxInput {
    repeated uint32 address_n = 1;                                      // BIP-32 path to derive the key from master node
    required bytes prev_hash = 2;                                       // hash of previous transaction output to spend by this input
    required uint32 prev_index = 3;                                     // index of previous output to spend
    optional uint32 sequence = 4 [default=0xffffffff];                  // sequence
    required uint64 amount = 5;                                         // amount of previous transaction output
}

/** Data type for transaction output to be signed.
 * @embed
 */
message MintlayerTransferTxOutput {
    optional string address = 1;                    // destination address in Base58 encoding; script_type must be PAYTOADDRESS
    repeated uint32 address_n = 2;                  // BIP-32 path to derive the destination (used for change addresses)
    required uint64 amount = 3;                     // amount to spend in satoshis
}

/** Data type for metadata about previous transaction which contains the UTXO being spent.
 * @embed
 */
message MintlayerPrevTx {
    required uint32 version = 1;
    required uint32 inputs_count = 6;
    required uint32 outputs_count = 7;
}

/** Data type for inputs of previous transactions.
 *
 * When adding fields, take care to not conflict with TxInput
 * @embed
 */
message MintlayerPrevInput {
    required bytes prev_hash = 2;                                       // hash of previous transaction output to spend by this input
    required uint32 prev_index = 3;                                     // index of previous output to spend

    // fields that are in use, or have been in the past, in MintlayerUtxoTxInput
    reserved 1, 4, 5;
}

/** Data type for outputs of previous transactions.
 * @embed
 */
message MintlayerPrevTransferOutput {
    required uint64 amount = 1;                     // amount sent to this output
}

/**
 * Request: Data about input to be signed.
 *
 * Do not edit this type without considering compatibility with TxAck.
 * Prefer to modify the inner TxInput type.
 *
 * @next TxRequest
 */
message MintlayerTxAckUtxoInput {
    required MintlayerTxAckInputWrapper tx = 1;

    message MintlayerTxAckInputWrapper {
        required MintlayerUtxoTxInput input = 2;
    }
}

/**
 * Request: Data about output to be signed.
 * Wire-alias of TxAck.
 *
 * Do not edit this type without considering compatibility with TxAck.
 * Prefer to modify the inner TxOutput type.
 *
 * @next TxRequest
 */
message MintlayerTxAckOutput {
    required MintlayerTxAckOutputWrapper tx = 1;

    message MintlayerTxAckOutputWrapper {
        required MintlayerTransferTxOutput output = 5;
    }
}
